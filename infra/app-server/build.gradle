import com.bmuschko.gradle.docker.tasks.container.*
import com.bmuschko.gradle.docker.tasks.image.*

/*
 * Builds the "base" image which includes a plain JBoss.
 */
task buildAppServerImage(type: DockerBuildImage) {
    dockerFile = project.file('Dockerfile')
    inputDir = dockerFile.parentFile
    tag = 'yatol/app-server'
}

/*
 * Copies the war files into the folder from which the Docker image
 * shall be built.
 */
task copyWars(type: Copy) {
    dependsOn ':backend:war', ':frontend:war'
    from project(':backend').file("build/libs/backend-${project.version}.war")
    from project(':frontend').file("build/libs/frontend-${project.version}.war")
    into project.file('build/app')
}

/*
 * Create a Docker file that includes the frontend and backend wars.
 */
task createAppDockerfile(type: Dockerfile) {
    dependsOn buildAppServerImage, copyWars
    destFile = project.file('build/app/Dockerfile')

    from 'yatol/app-server'
    copyFile("backend-${project.version}.war", '/opt/jboss/wildfly/standalone/deployments/backend.war')
    copyFile("frontend-${project.version}.war", '/opt/jboss/wildfly/standalone/deployments/frontend.war')
}

task buildAppImage(type: DockerBuildImage, dependsOn: createAppDockerfile) {
    inputDir = createAppDockerfile.destFile.parentFile
    tag = 'yatol/app'
}

task createAppContainer(type: DockerCreateContainer) {
    dependsOn buildAppImage, ':infra:db-srv:startDBContainer'
    targetImageId { buildAppImage.getImageId() }
    portBindings = ['8081:8080', '9990:9990']
    //mkdir '/yatol/app/deploy'
    //binds =['/yatol/app/deploy':'/opt/jboss/wildfly/standalone/deployments/']
    containerName = "appContainer"
    links = ['dbContainer:dbContainer']
}

task startAppContainer(type: DockerStartContainer) {
    dependsOn createAppContainer
    targetContainerId { createAppContainer.getContainerId() }
}

task stopAppContainer(type: DockerStopContainer) {
    dependsOn ':infra:db-srv:removeDBContainer'
    targetContainerId { createAppContainer.getContainerId() }
}

task removeAppContainer(type: DockerRemoveContainer) {
    dependsOn stopAppContainer
    targetContainerId { createAppContainer.getContainerId() }
}

task createContainer(type: DockerCreateContainer) {
    dependsOn buildAppServerImage, ':infra:db-srv:startDBContainer'
    targetImageId { buildAppServerImage.getImageId() }
    portBindings = ['8080:8080', '9990:9990']
    containerName = "pureContainer"
    links = ['dbContainer:dbContainer']
}

task startContainer(type: DockerStartContainer) {
    dependsOn createContainer
    targetContainerId { createContainer.getContainerId() }
}

task stopContainer(type: DockerStopContainer) {
    dependsOn ':infra:db-srv:removeDBContainer'
    targetContainerId { createContainer.getContainerId() }
}

task getAppContainerIpAddress(type: DockerInspectContainer) {
    dependsOn startAppContainer
    targetContainerId { createAppContainer.getContainerId() }
    responseHandler { response ->
        String ipAddress = response.networkSettings.ipAddress
        System.setProperty("appContainer.ipAddress", ipAddress)
    }
}
